import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:graphql_flutter/graphql_flutter.dart';
import '../models/espece.dart';
import '../config/graphql_config.dart';
import '../services/database_service.dart';
import '../services/network_service.dart';

class SyncService {
  static final DatabaseService _databaseService = DatabaseService();
  static bool _isSyncing = false;
  static Timer? _syncTimer;

  static const String addEspeceMutation = r'''
    mutation AddEspece($id: Int!, $nom: String!) {
      addEspece(id: $id, nom: $nom) {
        id
        nom
      }
    }
  ''';

  static void initialize() {
    debugPrint('üöÄ Initialisation du SyncService');
    
    NetworkService.connectivityStream.listen((isConnected) {
      debugPrint('üåê Changement de connectivit√© d√©tect√©: ${isConnected ? "Connect√©" : "D√©connect√©"}');
      if (isConnected) {
        debugPrint('üì° Connexion disponible - Lancement de la synchronisation');
        syncPendingData();
      }
    });

    // V√©rification p√©riodique
    _syncTimer?.cancel(); // Annuler le timer existant si pr√©sent
    _syncTimer = Timer.periodic(const Duration(seconds: 30), (timer) async {
      debugPrint('‚è∞ V√©rification p√©riodique de synchronisation');
      final isConnected = await NetworkService.checkConnectivity();
      if (isConnected) {
        syncPendingData();
      }
    });
  }

  static Future<void> syncPendingData() async {
    if (_isSyncing) {
      debugPrint('‚ö†Ô∏è Synchronisation d√©j√† en cours - Ignor√©');
      return;
    }

    _isSyncing = true;
    debugPrint('üîÑ D√©but du processus de synchronisation');

    try {
      final isConnected = await NetworkService.checkConnectivity();
      if (!isConnected) {
        debugPrint('‚ùå Pas de connexion - Synchronisation annul√©e');
        _isSyncing = false;
        return;
      }

      final pendingEspeces = await _databaseService.getPendingEspeces();
      debugPrint('üì¶ Esp√®ces √† synchroniser: ${pendingEspeces.length}');

      for (final espece in pendingEspeces) {
        try {
          debugPrint('üîÑ Synchronisation de l\'esp√®ce ${espece.id} (${espece.nom})');

          // Cr√©ation du client GraphQL
          final client = GraphQLClient(
            cache: GraphQLCache(),
            link: HttpLink('http://172.16.10.64:5220/graphql'),
          );

          // Ex√©cution de la mutation
          final MutationOptions options = MutationOptions(
            document: gql(addEspeceMutation),
            variables: {
              'id': espece.id,
              'nom': espece.nom,
            },
          );

          debugPrint('üì§ Envoi de la mutation pour ${espece.nom}');
          final result = await client.mutate(options);

          // V√©rification du r√©sultat
          if (result.hasException) {
            debugPrint('‚ùå Erreur GraphQL pour ${espece.nom}: ${result.exception}');
            continue;
          }

          // Mise √† jour du statut local
          await _databaseService.updateSyncStatus(espece.id, 'synced');
          debugPrint('‚úÖ Esp√®ce ${espece.nom} synchronis√©e avec succ√®s');

          // V√©rification de la mise √† jour
          final updatedEspeces = await _databaseService.getPendingEspeces();
          debugPrint('üìä Esp√®ces encore en attente: ${updatedEspeces.length}');

        } catch (e) {
          debugPrint('‚ùå Erreur lors de la synchronisation de ${espece.nom}: $e');
        }
      }
    } catch (e) {
      debugPrint('‚ùå Erreur g√©n√©rale de synchronisation: $e');
    } finally {
      _isSyncing = false;
      debugPrint('üèÅ Fin du processus de synchronisation');
    }
  }

  static void dispose() {
    debugPrint('üõë Arr√™t du SyncService');
    _syncTimer?.cancel();
  }

  // M√©thode de test pour forcer une synchronisation
  static Future<void> forceSyncForTesting() async {
    debugPrint('üî¨ Test forc√© de synchronisation');
    await syncPendingData();
  }
}